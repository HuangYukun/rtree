main.cpp
//linked to rtree.h
main()
help() // print help message
error() // print error message
process() //for handling input and deliver them into the Rtree

rtree.h
//linked to rtnode.h
class RTree {
public:
		RTree(int entry_num);//by default, dimension is 2
		RTree(int entry_num, int dim);
		~RTree();
public:
		void stat();//print statistics of the R-tree
		void print_tree();//print the R-tree
		bool tie_breaking(const BoundingBox& box1, const BoundingBox& box2);
		//PLEASE implement below three functions
		bool insert(const vector<int>& coordinate, int rid);
		void query_range(const BoundingBox& mbr, int& result_count, int& node_travelled);
		bool query_point(const vector<int>& coordinate, Entry& result);
}
//public interface of class RTree

rtnode.h
//linked to boundingbox.h
class Entry {
public:
	Entry();
	Entry(const BoundingBox& thatMBR, const int rid);
	~Entry();
	const BoundingBox& get_mbr() const;
	RTNode* get_ptr() const;
	int get_rid() const;

	void set_mbr(const BoundingBox& thatMBR);
	void set_ptr(RTNode* ptr);

	void print();
};
class RTNode {
	public:
		RTNode(int lev, int size);        
		RTNode(const RTNode& other);
		RTNode& operator=(const RTNode& other);
		~RTNode();

	public:
		int entry_num;
		Entry* entries;
		int level;
		int size;
};

boundingbox.h
class BoundingBox {
public:
	BoundingBox();
	BoundingBox(vector<int> thatLow, vector<int> thatHigh);
	BoundingBox(const BoundingBox& thatBox);

	const vector<int>& get_lowest() const;
	const vector<int>& get_highest() const;
	int get_dim() const;
	int get_area() const;
	int get_lowestValue_at(const int index) const;
	int get_highestValue_at(const int index) const;

	bool is_equal(const BoundingBox& rhs) const; 
	bool is_intersected(const BoundingBox& rhs) const;
	bool is_valid() const;
	void print() const;

	void group_with(const BoundingBox& rhs);

	void set_boundingbox(const BoundingBox& rhs);
};
